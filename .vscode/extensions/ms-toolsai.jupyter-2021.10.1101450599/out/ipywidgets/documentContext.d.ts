import { IChangedArgs } from '@jupyterlab/coreutils';
import { ISessionContext } from '@jupyterlab/apputils';
import { DocumentRegistry } from '@jupyterlab/docregistry';
import { INotebookModel } from '@jupyterlab/notebook/lib';
import { IRenderMime } from '@jupyterlab/rendermime';
import { Contents, Kernel } from '@jupyterlab/services';
import { Widget } from '@lumino/widgets';
import { Signal } from './signal';
import * as KernelSpec from '@jupyterlab/services/lib/kernelspec/kernelspec';
import { ISessionConnection, IManager } from '@jupyterlab/services/lib/session/session';
import { ISignal } from '@lumino/signaling';
declare type IKernelChangedArgs = IChangedArgs<Kernel.IKernelConnection | null, Kernel.IKernelConnection | null, 'kernel'>;
export declare class DocumentContext implements DocumentRegistry.IContext<INotebookModel>, ISessionContext {
    kernel: Kernel.IKernelConnection;
    pathChanged: Signal<this, string>;
    fileChanged: Signal<this, Contents.IModel>;
    saveState: Signal<this, DocumentRegistry.SaveState>;
    disposed: Signal<this, void>;
    model: INotebookModel;
    sessionContext: ISessionContext;
    private sessionConnection;
    path: string;
    localPath: string;
    contentsModel: Contents.IModel;
    urlResolver: IRenderMime.IResolver;
    isReady: boolean;
    ready: Promise<void>;
    isDisposed: boolean;
    terminated: Signal<this, void>;
    kernelChanged: Signal<this, IKernelChangedArgs>;
    sessionChanged: Signal<this, IChangedArgs<ISessionConnection, ISessionConnection, "session">>;
    propertyChanged: Signal<this, "path" | "name" | "type">;
    name: string;
    type: string;
    constructor(kernel: Kernel.IKernelConnection);
    rename(_newName: string): Promise<void>;
    download(): Promise<void>;
    get session(): ISessionConnection;
    initialize(): Promise<boolean>;
    get isTerminating(): boolean;
    get isRestarting(): boolean;
    get connectionStatusChanged(): ISignal<this, Kernel.ConnectionStatus>;
    get statusChanged(): any;
    get iopubMessage(): any;
    get unhandledMessage(): any;
    get status(): Kernel.Status;
    get kernelPreference(): ISessionContext.IKernelPreference;
    get kernelDisplayName(): string;
    get hasNoKernel(): boolean;
    get kernelDisplayStatus(): ISessionContext.KernelDisplayStatus;
    get prevKernelName(): string;
    get sessionManager(): IManager;
    get specsManager(): KernelSpec.IManager;
    restartKernel(): Promise<void>;
    changeKernel(_options: Partial<Kernel.IModel>): Promise<Kernel.IKernelConnection>;
    shutdown(): Promise<void>;
    selectKernel(): Promise<void>;
    restart(): Promise<boolean>;
    setPath(_path: string): Promise<void>;
    setName(_name: string): Promise<void>;
    setType(_type: string): Promise<void>;
    addSibling(_widget: Widget, _options?: any): any;
    save(): Promise<void>;
    saveAs(): Promise<void>;
    revert(): Promise<void>;
    createCheckpoint(): Promise<import('@jupyterlab/services').Contents.ICheckpointModel>;
    deleteCheckpoint(_checkpointID: string): Promise<void>;
    restoreCheckpoint(_checkpointID?: string): Promise<void>;
    listCheckpoints(): Promise<import('@jupyterlab/services').Contents.ICheckpointModel[]>;
    dispose(): void;
}
export {};
